// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  content
}

enum EventStatus {
  draft
  comingSoon
  dateAnnounced
  registrationOpen
  registrationClosed
  ongoing
  completed
}

enum EventType {
  INTER_UNIVERSITY
  SLTC_ONLY
  IEEE_MEMBERS
  PUBLIC
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

model User {
  id            String   @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  Session    Session[]
  Account    Account[]
  role       Role
  banned     Boolean?
  banReason  String?
  banExpires Int?
  invitations UserInvitation[] @relation("UserInvitations")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id           String    @id @map("_id")
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

model UserInvitation {
  id          String           @id @map("_id") @default(cuid())
  email       String
  token       String           @unique
  createdAt   DateTime         @default(now())
  expiresAt   DateTime
  status      InvitationStatus @default(PENDING)
  role        Role             @default(user)
  userId      String?
  user        User?            @relation("UserInvitations", fields: [userId], references: [id], onDelete: SetNull)
  createdBy   String?
  name        String?

  @@map("userInvitation")
}

model Event {
  id                String            @id @map("_id") @default(cuid())
  slug              String            @unique
  title             String
  description       String
  image             String
  coverImage        String
  createdAt         DateTime
  date              DateTime
  status            EventStatus       @default(draft)
  organizationUnitId String
  organizationUnit  OrganizationUnit  @relation(fields: [organizationUnitId], references: [id])
  EventSession      EventSession[]
  eventType         EventType         @default(PUBLIC)
  location          String
  galleryItems      EventGalleryItem[]

  @@map("event")
}

model EventSession {
  id          String   @id @map("_id") @default(cuid())
  title       String
  description String
  data        DateTime

  createdAt   DateTime
  eventId     String
  event       Event @relation(fields: [eventId], references: [id])

  @@map("EventSession")
}

model OrganizationUnit {
  id          String   @id @map("_id") @default(cuid())
  slug        String   @unique
  title       String
  description String
  image       String
  createdAt   DateTime
  posts       Post[]
  @@map("organizationUnit")
  events Event[]
}

model Author {
  id        String   @id @map("_id") @default(cuid())
  name      String
  bio       String
  createdAt DateTime @default(now())
  posts     Post[]   @relation(fields: [postIds], references: [id])
  postIds   String[]
  @@map("author")
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Post {
  id          String   @id @map("_id") @default(cuid())
  slug        String   @unique
  title       String
  content     String
  coverImage  String
  excerpt     String
  tags        String[]
  status      PostStatus @default(DRAFT)
  
  createdAt   DateTime @default(now())
  publishedAt DateTime?
  updatedAt   DateTime @updatedAt

  authors     Author[] @relation(fields: [authorIds], references: [id])
  authorIds   String[]
  
  organizationUnitId String?
  organizationUnit OrganizationUnit? @relation(fields: [organizationUnitId], references: [id])
  
  @@map("post")
}

model EventGalleryItem {
  id        String   @id @map("_id") @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  imageUrl  String
  caption   String?
  createdAt DateTime @default(now())

  @@map("eventGalleryItem")
}

// Enums and model for configurable homepage hero announcements
enum CTAButtonStyle {
  PRIMARY
  SECONDARY
}

enum HeroBackgroundType {
  IMAGE
}

// Removed gradient styles as hero background is image-only now

enum HeroOverlayOpacity {
  LIGHT // ~20%
  MEDIUM // ~40%
  DARK // ~60%
}

enum HeroContentLayout {
  LEFT
  CENTER
}

model HeroAnnouncement {
  id              String             @id @map("_id") @default(cuid())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  internalTitle   String
  headline        String
  subHeadline     String?

  // Buttons: up to 2
  buttons         Json               // [{ text: string, url: string, style: CTAButtonStyle }]

  // Visuals & Branding
  backgroundType  HeroBackgroundType
  desktopImageUrl String?
  imageAlt        String?
  overlay         HeroOverlayOpacity @default(MEDIUM)
  contentLayout   HeroContentLayout  @default(LEFT)

  // Special features
  countdownEnabled Boolean           @default(false)
  countdownTo      DateTime?
  countdownLabel   String?

  badgeEnabled     Boolean           @default(false)
  badgeText        String?

  // Scheduling
  scheduleEnabled  Boolean           @default(false)
  startAt          DateTime?
  endAt            DateTime?

  @@map("heroAnnouncement")
}
